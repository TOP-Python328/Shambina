НАСЛЕДОВАНИЕ ОТ БАЗОВЫХ КЛАССОВ

  ==========  1  ==========  

Написать классы с именами Point, Line и Polygon, которые описывают двумерные точку, отрезок и многоугольник соответственно.

В файле # ref 1.png приведена UML диаграмма классов. Постарайтесь прочитать и понять структуру классов и связи между ними только по диаграмме.
Ниже дано более подробное описание классов. Прибегайте к нему в случае, если обозначения диаграммы непонятны.


Поля класса Point отсутствуют.

Атрибуты экземпляра Point:
    - x - защищённый - координата точки по оси X: float
    - y - защищённый - координата точки по оси Y: float
    
    Данные атрибуты должны быть неизменяемыми — реализовать с помощью сеттеров.

Свойства Point:
    - x - геттер для защищённого атрибута x -> float
    - x - сеттер для защищённого атрибута x .. TypeError
    - y - геттер для защищённого атрибута y -> float
    - y - сеттер для защищённого атрибута y .. TypeError
    
    В обоих сеттерах реализовать выброс исключения TypeError сразу после вызова.

Методы Point:
    - __init__ - конструктор класса
    - __eq__ - специальный метод, вызываемый для операторов == и !=
    - __repr__ - машиночитаемое строковое представление
    - __str__ - человекочитаемое строковое представление

Параметры конструктора Point:
    - x: float
    - y: float


Поля класса Line отсутствуют.

Атрибуты экземпляра Line:
    - start - защищённый - точка начала отрезка: Point
    - end - защищённый - точка окончания отрезка: Point
    - length - защищённый - расстояние между точками start и end: Point
    
    Изменение атрибутов start и end должно повлечь изменение атрибута length. Атрибут length должен быть неизменяемым. Реализовать с помощью сеттеров.

Свойства Line:
    - start - геттер для защищённого атрибута start -> Point
    - start - сеттер для защищённого атрибута start -> None
    - end - геттер для защищённого атрибута end -> Point
    - end - сеттер для защищённого атрибута end -> None
    - length - геттер для защищённого атрибута length -> Point
    - length - сеттер для защищённого атрибута length .. TypeError
    
    В сеттерах start и end реализовать проверку типа переданного значения — при попытке присовения любого другог типа кроме Point выбросить исключение TypeError.
    В сеттере length реализовать выброс исключения TypeError сразу после вызова.

Методы Line:
    - __init__ - конструктор класса
    - __repr__ - машиночитаемое строковое представление
    - __str__ - человекочитаемое строковое представление
    - length_calc - статический, защищённый - вычисляет расстояние между двумя точками -> float
    
    Расстояние между двумя точками вычисляется по формуле:
        https://ru.onlinemschool.com/math/library/analytic_geometry/point_point_length/

Параметры конструктора Line:
    - start: Point
    - end: Point

Параметры статического метода length_calc:
    - point1: Point
    - point2: Point


Polygon наследует от list. Элементами списка Polygon являются экземпляры Line.

Поля класса Polygon отсутствуют.

Атрибуты экземпляра Polygon отсутствуют.

Свойства Polygon:
    - perimeter - вычисляет периметр многоугольника -> float
    
    Если периметр прямоугольника посчитать невозможно (многоугольник не замкнут), то должно быть выброшено исключение ValueError.

Методы Polygon:
    - __init__ - конструктор класса
    - is_closed - частный - проверяет, формируют ли отрезки замкнутый многоугольник -> float
    
    Многоугольник является замкнутым, если конечная точка каждого отрезка равна начальной точке следующего отрезка. Конечная точка последнего отрезка должна быть равна начальной точке первого отрезка.

Параметры конструктора Polygon:
    - side1: Line
    - side2: Line
    - side3: Line
    - *sides: Line
    
    Замкнутый многоугольник может быть задан минимум тремя отрезками.

Параметры метода is_closed отсутствуют.

Работу написанных классов необходимо протестировать.

Пример теста:
    >>> p1 = Point(0, 3)
    >>> p2 = Point(4, 0)
    >>> p3 = Point(8, 3)
    >>> 
    >>> p1
    (0,3)
    >>>
    >>> repr(p1) == str(p1)
    True
    >>>
    >>> p1 == Point(0, 3)
    True
    >>>
    >>> p1.x, p1.y
    (0, 3)
    >>>
    >>> p2.y = 5
    ...
    TypeError: 'Point' object does not support coordinate assignment
    >>>
    >>>
    >>> l1 = Line(p1, p2)
    >>> l2 = Line(p2, p3)
    >>> l3 = Line(p3, p1)
    >>>
    >>> l1
    (0,3)———(4,0)
    >>>
    >>> repr(l1) == str(l1)
    True
    >>>
    >>> l1.length
    5.0
    >>>
    >>> l1.length = 10
    ...
    TypeError: 'Line' object does not support length assignment
    >>> 
    >>> l3.start = 12
    ...
    TypeError: 'start' attribute of 'Line' object supports only 'Point' object assignment
    >>> 
    >>> 
    >>> pol1 = Polygon(l1, l2, l3)
    >>>
    >>> pol1.perimeter
    18.0
    >>> pol1.perimeter = 20
    ...
    AttributeError: property 'perimeter' of 'Polygon' object has no setter
    >>>
    >>> l3.end = Point(-10, -10)
    >>> pol1.perimeter
    ...
    ValueError: line items doesn't form a closed polygon



  =========================

Каждый класс должен быть документирован. 
Каждый метод кроме встроенных (специальных) должен быть документирован.

Каждое поле класса должно быть аннотировано. 
Атрибуты экземпляра аннотируются в том случае, если типы их значений не совпадают с соответствующими переданными в конструктор аргументами, или если атрибуты создаются безотносительно переданных в конструктор аргументов.
Каждый параметр (кроме self и cls) всех методов должен быть аннотирован. 
Каждое возвращаемое значение методов кроме встроенных (специальных) должно быть аннотировано.

Во всех случаях аннотация опускается, если с аннотируемым идентификатором может быть связан объект произвольного типа.

Помимо перечисленных в каждой задаче обязательных атрибутов классов и экземпляров возможно добавление собственных вспомогательных атрибутов и методов.

Работа классов тестируется в режиме инспекции файла с кодом.
Ввод и вывод в стандартные потоки результатов тестов копируются.
Копия в виде комментария помещается в конец файла с кодом задачи.

Невыполнение дополнительных задач не повлечёт снижения баллов за задание. Тем не менее они настоятельно рекомендуются к решению.

В сервис Журнал отправляется сообщение о выполнении всех частей задания со ссылкой на репозиторий.

Преподаватель пишет комментарии и правки в коде задач и обновляет файлы в удалённом репозитории.
Регулярно получайте обновления в свой локальный репозиторий из удалённого репозитория.